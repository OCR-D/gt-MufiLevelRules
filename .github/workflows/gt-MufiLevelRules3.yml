name: gt-MufiLevelRules
on:
  push:
    tags:
      - 'm[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
jobs:
  cli:
    name: gt-MufiLevelRules
    runs-on: ubuntu-latest
    steps:

    - name: Git checkout
      uses: actions/checkout@v4


    # Instalations Unicruft

    - name: install unicruft
      run: |
        cd unicruft
        gunzip *.gz
        tar -xvf *tar
        cd unicruft-0.24
        sh ./configure
        make
        sudo make install
        sudo ldconfig
        

    
    
    
    # Instalations Styles
      
    - name: install anaylse xsl-styles
      run: | 
        git clone https://github.com/tboenig/keyboardGT.git
        mv keyboardGT/metadata/mufi.json metadata/mufi.json
        mv keyboardGT/scripts/table_hide.css scripts/table_hide.css
        mv keyboardGT/scripts/_config.yml scripts/_config.yml
        cd metadata
        ls -l
        cd ..
        rm -r keyboardGT
   
   
   # Installation and Directories

    - name: Download and install saxon
      run: |
       wget https://sourceforge.net/projects/saxon/files/Saxon-HE/11/Java/SaxonHE11-4J.zip/download
       unzip download


    - name: Make gh-pages_out, rules
      run: |
        ls -l
        mkdir ghout
        mkdir ghout/rules
        mkdir ghout/rules/characters
        cp README.md ghout/index.md

      
        

   # Transformation and analysis

    - name: Transform MUFI snapshot to rules 
      run: |
        java -jar saxon-he-11.4.jar -xsl:scripts/MufiGTLevelRules2.xsl -s:scripts/MufiGTLevelRules.xsl output=characters merge=yes
      shell: bash

    - name: normalize Megarules
      run: |
        java -jar saxon-he-11.4.jar -xsl:scripts/make_level_one.xsl -s:scripts/megalevelrules.xml -o:scripts/level_one.xml
        cd scripts
        unicruft -D level_one.xml > norm_level_one.xml
        cd ..
        java -jar saxon-he-11.4.jar -xsl:scripts/merge_level_one.xsl -s:scripts/merge_level_one.xsl -o:ghout/rules/megalevelrules.xml
      shell: bash  

   # GH-style

    - name: Copy css styles, config files
      run:  |
        cp scripts/table_hide.css ghout/
        cp scripts/_config.yml ghout/
        
    - name: Copy rules Directory
      run:
          cp -r ghout/rules .   
    
    


    - name: Archive the rules files
      uses: thedoctor0/zip-release@master
      with:
        filename: OCR-D-Rules-v${{ github.run_number }}.zip
        path: 'rules'
  
   



    - name: Create GitHub release
      id: create-new-release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ github.ref_name }}
          release_name: OCR-D-Rules-zip-package (Release${{ github.run_number }})
          body: |
            <dl>
            <dt>Version:</dt> 
            <dd>OCR-D-Rules-zip-package (Release${{ github.run_number }}_${{ github.ref_name }}</dd>
            <dt>Info:</dt>
            <dd>
            The file OCR-D-Rules-v${{ github.run_number }}.zip is a zip archive file.<br/>
            If you wish to use the rules, this file must first be unpacked.<br/>
            
            The archive file contains:<br/>
              <ul><li><b>megarules.xml</b>: This file contains all the Rules in XML format.</li>
                  <li>In the subdirectory <b>characters<b/> of the OCR-D-Rules-v${{ github.run_number }}.zip ZIP archive you will find the corresponding rules divided into character groups or categories. The rules are available in JSON or XML format.</li></ul>
            </dd>
            </dl>
            </dl>
          draft: false
          prerelease: false


    - name: Upload asset to GitHub release
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./OCR-D-Rules-v${{ github.run_number }}.zip
          asset_name: OCR-D-Rules-v${{ github.run_number }}.zip
          asset_content_type: application/zip
   

    
   
   
    
  



    - name: Deploy GT-Overview to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ghout # The folder the action should deploy.